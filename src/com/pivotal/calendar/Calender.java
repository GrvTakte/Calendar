package com.pivotal.calendar;

import com.codename1.components.ToastBar;
import com.codename1.io.Log;
import com.codename1.ui.Button;
import com.codename1.ui.Calendar;
import com.codename1.ui.Command;
import com.codename1.ui.Container;
import com.codename1.ui.Display;
import com.codename1.ui.Form;
import com.codename1.ui.Dialog;
import com.codename1.ui.FontImage;
import com.codename1.ui.Label;
import com.codename1.ui.TextField;
import com.codename1.ui.layouts.BoxLayout;
import com.codename1.ui.plaf.UIManager;
import com.codename1.ui.util.Resources;
import java.io.IOException;
import com.codename1.ui.Toolbar;
import com.codename1.ui.events.ActionEvent;
import com.codename1.ui.events.ActionListener;
import com.codename1.ui.table.TableLayout;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Map;

/**
 * This file was generated by <a href="https://www.codenameone.com/">Codename One</a> for the purpose 
 * of building native mobile applications using Java.
 */
public class Calender{

    private Form current;
    private Resources theme;
    Form calendar, saveEvent;
     Label dateLabel;
     TextField eventArea, descriptionArea;
     Calendar cal;
     
     
    public void init(Object context) {
        theme = UIManager.initFirstTheme("/theme");

        // Enable Toolbar on all Forms by default
        Toolbar.setGlobalToolbar(true);

        // Pro only feature, uncomment if you have a pro subscription
        // Log.bindCrashProtection(true);
    }
    
   
    
    public void start() {
        if(current != null){
            current.show();
            return;
        }
        try{
        SplashScreen spl = new SplashScreen();
        spl.show();
        
        new java.util.Timer().schedule(
                new java.util.TimerTask() {
            @Override
            public void run() {
                calendar.show();
            }
        } , 4000);
        }catch(IOException e){
            e.printStackTrace();
        }
        
        calendar = new Form("Events", new BoxLayout(BoxLayout.Y_AXIS));
        cal = new Calendar();
        
        calendar.add(cal);
        Label date = new Label("Event Date:- ");
        dateLabel = new Label();
        Label event = new Label("Event:- ");
        eventArea = new TextField();
        Label description = new Label("Event Description:- ");
        descriptionArea = new TextField();
       
        Container container = TableLayout.encloseIn(2, date, dateLabel, event, eventArea, description, descriptionArea);
        container.setUIID("container");
        calendar.add(container);
        cal.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                try{
                SimpleDateFormat sdf = new SimpleDateFormat("EE MMM dd HH:mm:ss z yyyy");
                String selectedDate = new Date(cal.getSelectedDay()).toString();
                Date date1 = sdf.parse(selectedDate);
                SimpleDateFormat df  = new SimpleDateFormat("dd/MM/yyyy");
                dateLabel.setText(df.format(date1));
                } catch (ParseException ex) {
                    ex.printStackTrace();
                }               
            }
        });
        
        Toolbar tb = new Toolbar();
        calendar.setToolBar(tb);
        
        tb.addCommandToRightBar("", FontImage.createMaterial(FontImage.MATERIAL_SAVE, UIManager.getInstance().getComponentStyle("TitleCommand")), (evt) -> {
            saveEvent.show();
        });
        tb.addCommandToLeftBar("", FontImage.createMaterial(FontImage.MATERIAL_EVENT, UIManager.getInstance().getComponentStyle("TitleCommand")), (evt) -> {
            
        });
        
       Button add= new Button("Add Event");
       Button clear = new Button("Clear Event");
       calendar.add(add);
       calendar.add(clear);
       
       
       //Saved Events Form Starts  ====================================================================================
        saveEvent = new Form("Saved Event", new BoxLayout(BoxLayout.Y_AXIS));
        Command back = new Command("Back"){
              public void actionPerformed(ActionEvent ev){
                  calendar.show();
              }  
            };
            saveEvent.setBackCommand(back);
            Toolbar tb1 = new Toolbar();
            saveEvent.setToolBar(tb1);
            tb1.addCommandToLeftBar("", FontImage.createMaterial(FontImage.MATERIAL_ARROW_BACK, UIManager.getInstance().getComponentStyle("TitleCommand")), back);
       //Save Events Form Ends =======================================================================================
       
       add.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                   Log.p(dateLabel.getText().toString());     
           //if((dateLabel.getText() == null) && (eventArea.getText() == null) && (descriptionArea.getText() == null)){
               if((dateLabel.getText()== "") || (eventArea.getText() == "") || (descriptionArea.getText()== "")){
               Dialog.show("Required field", "Please fill all the fields", "OK", "");
           }
           //}
           else{
                   
            Label date1 = new Label("Event Date:- ");
        Label dateLabel1 = new Label(dateLabel.getText());
        Label event1 = new Label("Event:- ");
        Label eventArea1 = new Label(eventArea.getText());
        Label description1 = new Label("Event Description:- ");
        Label descriptionArea1 = new Label(descriptionArea.getText());
        
            Container container1 = TableLayout.encloseIn(2, date1,dateLabel1,event1, eventArea1, description1, descriptionArea1);
            container1.setUIID("container");
            
            saveEvent.add(container1);           
            
                   ToastBar.showMessage("Event successfull saved",FontImage.MATERIAL_SAVE, 4000);
            
           }
            }
        });       
    }

    public void stop() {
        current = Display.getInstance().getCurrent();
        if(current instanceof Dialog) {
            ((Dialog)current).dispose();
            current = Display.getInstance().getCurrent();
        }
    }
    
    public void destroy() {
    }

}
